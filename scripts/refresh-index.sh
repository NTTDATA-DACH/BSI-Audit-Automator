# bsi-audit-automator/scripts/refresh-index.sh
#!/bin/bash
set -euo pipefail

# ===================================================================
# SCRIPT TO FORCE-REFRESH THE VERTEX AI VECTOR SEARCH INDEX
# ===================================================================
#
# WHAT IT DOES:
# This script manually triggers an update operation on the Vertex AI
# Index. This forces the index to re-scan its configured GCS
# directory (`vector_index_data/`) and ingest any new or updated
# JSONL embedding files.
#
# WHEN TO USE IT:
# Use this script if you suspect the index's automatic update
# (`contentsDeltaUri`) has failed and the item count in the index
# does not reflect the number of chunks generated by the ETL process.
#
# PREREQUISITES:
#   - Must be run from the project root ('bsi-audit-automator/').
#   - 'gcloud' and 'terraform' CLIs must be installed and authenticated.
#   - `terraform apply` must have been run successfully.
#

echo "üîπ This script will force a manual update of the Vertex AI Index content from GCS."

# --- Cleanup handler: ensures the temporary metadata file is deleted on exit ---
cleanup() {
  rm -f index_metadata.yaml
  echo "üîπ Temporary metadata file cleaned up."
}
trap cleanup EXIT

# --- Configuration & Validation ---
TERRAFORM_DIR="../terraform"
METADATA_FILE="index_metadata.yaml"

if [ ! -d "$TERRAFORM_DIR" ]; then
    echo "‚ùå Error: Terraform directory not found at '$TERRAFORM_DIR'. Please run this from the project root."
    exit 1
fi
if ! command -v terraform &> /dev/null || ! command -v gcloud &> /dev/null; then
    echo "‚ùå Error: 'terraform' or 'gcloud' command not found. Please install and configure them."
    exit 1
fi

echo "üîπ Fetching infrastructure details from Terraform state..."

# --- Dynamic Values from Terraform ---
PROJECT_ID="$(terraform -chdir=${TERRAFORM_DIR} output -raw project_id)"
REGION="$(terraform -chdir=${TERRAFORM_DIR} output -raw region)"
BUCKET_NAME="$(terraform -chdir=${TERRAFORM_DIR} output -raw vector_index_data_gcs_path | cut -d'/' -f3)"
# Use `xargs basename` to get just the numeric ID from the full resource path
INDEX_ID="$(terraform -chdir=${TERRAFORM_DIR} output -raw vertex_ai_index_id | xargs basename)"

CONTENTS_DELTA_URI="gs://${BUCKET_NAME}/vector_index_data/"

# --- Generate the required metadata file dynamically ---
echo "üîπ Generating temporary metadata file ('${METADATA_FILE}')..."
cat <<EOF > ${METADATA_FILE}
# This file is dynamically generated by refresh-index.sh
contentsDeltaUri: "${CONTENTS_DELTA_URI}"
config:
  dimensions: 3072
  approximateNeighborsCount: 150
  algorithmConfig:
    treeAhConfig:
      leafNodeEmbeddingCount: 500
EOF

# --- User Confirmation ---
echo "-----------------------------------------------------"
echo "  Project:          ${PROJECT_ID}"
echo "  Region:           ${REGION}"
echo "  Index ID:         ${INDEX_ID}"
echo "  Data Source URI:  ${CONTENTS_DELTA_URI}"
echo "-----------------------------------------------------"

read -p "üö® Do you want to proceed with updating the index content? (y/n) " -n 1 -r
echo # move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Aborted by user."
    exit 1
fi

# --- Execute the gcloud command ---
echo "üöÄ Sending update command to Vertex AI Index '${INDEX_ID}'..."
gcloud ai indexes update "${INDEX_ID}" \
  --metadata-file="./${METADATA_FILE}" \
  --project="${PROJECT_ID}" \
  --region="${REGION}"

echo ""
echo "‚úÖ Index update operation started successfully."
echo "   You can monitor its progress in the GCP Console:"
echo "   Vertex AI -> Matching Engine -> Select your Index."
echo "   Wait for the 'Dense vector count' to reflect your data."