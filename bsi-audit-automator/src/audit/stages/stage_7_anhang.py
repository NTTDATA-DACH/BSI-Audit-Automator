# src/audit/stages/stage_7_anhang.py
import logging
import json
import asyncio
from typing import Dict, Any, List

from src.config import AppConfig
from src.clients.gcs_client import GcsClient
from src.clients.ai_client import AiClient

class Chapter7Runner:
    """
    Handles generating the appendix for Chapter 7.
    - 7.1 is generated deterministically by listing GCS files.
    - 7.2 is generated by an AI summarizing findings from Chapter 5.
    """
    STAGE_NAME = "Chapter-7"

    def __init__(self, config: AppConfig, gcs_client: GcsClient, ai_client: AiClient):
        self.config = config
        self.gcs_client = gcs_client
        self.ai_client = ai_client
        logging.info(f"Initialized runner for stage: {self.STAGE_NAME}")

    def _load_asset_text(self, path: str) -> str:
        with open(path, 'r', encoding='utf-8') as f: return f.read()

    def _load_asset_json(self, path: str) -> dict:
        with open(path, 'r', encoding='utf-8') as f: return json.load(f)

    async def _generate_referenzdokumente_table(self) -> Dict[str, Any]:
        """Deterministically lists source files from GCS."""
        logging.info("Generating subchapter 7.1 (Referenzdokumente) from GCS file list.")
        try:
            source_files = self.gcs_client.list_source_files()
            rows = []
            for i, blob in enumerate(source_files):
                rows.append({
                    "Nr.": f"A.{i}", # Simple enumeration
                    "Kurzbezeichnung": blob.name.split('/')[-1],
                    "Dateiname / Verweis": blob.name,
                    "Version, Datum": blob.updated.strftime("%Y-%m-%d") if blob.updated else "N/A",
                    "Relevante Änderungen": "Initial eingereicht für Audit."
                })
            return {"referenzdokumente": {"rows": rows}}
        except Exception as e:
            logging.error(f"Failed to generate Referenzdokumente table: {e}", exc_info=True)
            return {"referenzdokumente": {"rows": []}} # Return empty on failure

    async def _generate_abweichungen_table(self) -> Dict[str, Any]:
        """Uses AI to summarize deviations from the Chapter 5 results."""
        logging.info("Generating subchapter 7.2 (Abweichungen und Empfehlungen) from Chapter 5 results.")
        # Load Chapter 5 results as they are a dependency
        try:
            ch5_results_path = f"{self.config.output_prefix}results/Chapter-5.json"
            chapter_5_data = self.gcs_client.read_json(ch5_results_path)
        except Exception as e:
            logging.error(f"Could not load Chapter 5 results, required for 7.2. Error: {e}")
            return {"abweichungenUndEmpfehlungen": {"rows": []}}

        # Parse findings from Chapter 5
        raw_deviations = []
        pruefungen = chapter_5_data.get("verifikationDesITGrundschutzChecks", {}).get("bausteinPruefungen", [])
        for pruefung in pruefungen:
            for anforderung in pruefung.get("anforderungen", []):
                if anforderung.get("bewertung") in ["Teilweise", "Mangelhaft"] or anforderung.get("abweichungen") not in [None, "", "Keine."]:
                    raw_deviations.append(f"- Control {anforderung['nummer']}: {anforderung['anforderung']}. Finding: {anforderung['auditfeststellung']}. Deviation: {anforderung['abweichungen']}")

        if not raw_deviations:
            logging.info("No deviations found in Chapter 5. Skipping AI call for 7.2.")
            return {"abweichungenUndEmpfehlungen": {"rows": []}}

        # Call AI to structure the findings
        prompt_template = self._load_asset_text("assets/prompts/stage_7_2_abweichungen.txt")
        schema = self._load_asset_json("assets/schemas/stage_7_2_abweichungen_schema.json")
        prompt = prompt_template.format(raw_deviations="\n".join(raw_deviations))
        
        try:
            generated_data = await self.ai_client.generate_json_response(prompt, schema)
            return {"abweichungenUndEmpfehlungen": generated_data}
        except Exception as e:
            logging.error(f"Failed to generate Abweichungen table via AI: {e}", exc_info=True)
            return {"abweichungenUndEmpfehlungen": {"rows": []}}

    async def run(self) -> dict:
        """Executes all sub-tasks for Chapter 7 in parallel."""
        logging.info(f"Executing stage: {self.STAGE_NAME}")
        
        tasks = [
            self._generate_referenzdokumente_table(),
            self._generate_abweichungen_table()
        ]
        
        results_list = await asyncio.gather(*tasks)

        aggregated_results = {}
        for res_dict in results_list:
            aggregated_results.update(res_dict)
            
        logging.info(f"Successfully aggregated results for all of stage {self.STAGE_NAME}")
        return aggregated_results